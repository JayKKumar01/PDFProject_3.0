package pdfproject.reportutil;

public class ReportHtml {
    public static final String REPORT_HTML = "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Report</title>\n\n    <!-- Link to general layout styles -->\n    <style type=\"text/css\">\n/* Setting a darker shade of white for the body */\nbody {\n    background-color: #f4f4f4; /* A bit darker than white */\n    margin: 0; /* Removing default margin */\n    padding: 0;\n    height: 100vh; /* Ensure full viewport height */\n    display: flex;\n    justify-content: center;\n    align-items: center; /* Center content vertically */\n    font-family: 'Arial', sans-serif; /* Modern sans-serif font */\n}\n\n/* Container div with 95% width and 95% height of the viewport */\n.container {\n    width: 95vw; /* 95% of viewport width */\n    height: 95vh; /* 95% of viewport height */\n    background-color: #ffffff; /* White background for the div */\n    box-sizing: border-box; /* Ensure margin is inside the div */\n    display: flex;\n    justify-content: center; /* Align items horizontally */\n    align-items: center; /* Center content vertically */\n    border-radius: 15px; /* Rounded corners for a soft modern look */\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */\n    transition: box-shadow 0.3s ease; /* Smooth transition for shadow */\n}\n\n\n\n</style>\n    <!-- Link to right-content specific styles -->\n    <style type=\"text/css\">\n/* Right-side div with 90% width */\n.right-content {\n    width: 90%; /* 90% width */\n    height: 100%; /* Full height */\n    display: flex;\n    flex-direction: column; /* Stack elements vertically */\n}\n\n/* Top div */\n.top-div {\n    display: flex;\n    flex-direction: row; /* Arrange buttons horizontally */\n    justify-content: center; /* Center buttons horizontally */\n    align-items: center; /* Center buttons vertically */\n    padding: 10px 0; /* Small padding for some spacing */\n    height: auto; /* Allow height to adjust based on content */\n    width: 100%; /* Full width */\n}\n\n/* Styling only the buttons inside the top div */\n.top-div button {\n    padding: 15px 30px; /* Horizontal padding to make buttons bigger */\n    margin: 0 10px; /* Small margin between buttons */\n    font-size: 18px; /* Larger font size for readability */\n    border: none; /* Remove default border */\n    border-radius: 8px; /* Rounded corners for modern look */\n    background-color: #d3d3d3; /* Grey background color for unselected buttons */\n    color: white; /* White text color */\n    cursor: pointer; /* Pointer cursor on hover */\n    transition: background-color 0.3s ease; /* Smooth transition for background color */\n}\n\n/* Selected button style (green) */\n.top-div button.selected {\n    background-color: #28a745; /* Green background color */\n}\n\n/* Hover effect for buttons inside top div */\n.top-div button:hover {\n    background-color: #146544; /* Darker grey on hover */\n    transform: scale(.95); /* Slight scale-up effect */\n}\n\n/* Bottom div */\n.bottom-div {\n    display: flex; /* Flexbox for bottom div */\n    justify-content: center; /* Center navigation elements */\n    align-items: center; /* Center items vertically */\n    width: 100%; /* Full width */\n    padding: 10px 0; /* Small padding for some spacing */\n}\n\n/* Navigation buttons container */\n.navigation-buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px; /* Gap between buttons and page info */\n}\n\n/* Styling for individual navigation buttons */\n.navigation-buttons button {\n    padding: 10px 20px; /* Padding for buttons */\n    font-size: 16px; /* Font size for readability */\n    background-color: #4a90e2; /* Blue background */\n    color: white; /* White text color */\n    border: none; /* Remove border */\n    border-radius: 8px; /* Rounded corners */\n    cursor: pointer; /* Pointer cursor on hover */\n    transition: background-color 0.3s ease; /* Smooth transition */\n}\n\n/* Hover effect for navigation buttons */\n.navigation-buttons button:hover {\n    background-color: #357ab7; /* Darker blue on hover */\n}\n\n/* Styling for the page info text */\n.navigation-buttons #page-info {\n    font-size: 16px;\n    color: #333; /* Dark text color for readability */\n}\n\n/* Disabled button styles */\n.navigation-buttons button:disabled {\n    background-color: #cccccc; /* Light gray */\n    color: #666666;             /* Darker text */\n    cursor: not-allowed;\n}\n\n</style>\n    <!-- Link to middle content specific styles -->\n    <style type=\"text/css\">\n/* Middle content section */\n.middle-content {\n    flex: 1; \n    overflow-y: auto;\n    display: flex; /* Make sure middle-content itself is a flex container */\n    flex-direction: column; /* Stack content-div and alignment-div vertically */\n}\n\n\n\n\n</style>\n    <style type=\"text/css\">\n/* Content div with fixed width */\n.content-div {\n    display: flex;\n    /* Flexbox layout */\n    flex-direction: row;\n    /* Horizontal layout */\n    gap: 20px;\n    /* Space between image and report containers */\n    width: 100%;\n    /* 100% width of its parent container */\n    height: 100%;\n    /* Full height of its parent container */\n    padding: 0 10px;\n    /* <-- Only left and right */\n    box-sizing: border-box;\n    /* Includes padding and border in the width calculation */\n    overflow: hidden;\n    /* Prevents overflow if any */\n}\n\n/* Image container (2/3 width) */\n.image-container {\n    width: 66.66%;\n    /* Fixed width 2/3 of the container */\n    height: 100%;\n    /* Full height of its parent container */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n}\n\n/* Image to fit in the container */\n#mainImage {\n    height: 100%;\n    /* Ensure the image fits container width */\n    max-height: 100%;\n    /* Ensure the image fits container height */\n    object-fit: contain;\n    /* Maintain aspect ratio */\n    background-color: black;\n}\n\n#circleImage {\n    position: absolute;\n    display: none;\n    border-radius: 50%;\n    object-fit: contain;\n    pointer-events: none;\n}\n\n#reportCircleImage {\n    position: absolute;\n    display: none;\n    border-radius: 50%;\n    object-fit: contain;\n    pointer-events: none;\n}\n\n/* Report container (1/3 width) */\n.report-container {\n    width: 33.33%;\n    /* Fixed width 1/3 of the container */\n    height: 100%;\n    /* Full height of its parent container */\n    display: block;\n    justify-content: flex-start;\n    /* Align from top */\n    overflow-y: auto;\n    /* Enable vertical scrolling */\n}\n\n/* Report image */\n.report-container img {\n    width: 100%;\n    /* Image width 100% */\n    height: auto;\n    /* Maintain aspect ratio */\n    object-fit: cover;\n    /* Image fills container, maintaining aspect ratio */\n    object-position: top;\n    /* Align the image from the top */\n    max-height: none;\n    /* Ensure no height restriction */\n}\n</style>\n    <style type=\"text/css\">\n.alignment-div {\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n    width: 100%;\n    height: 100%;\n    padding: 0 10px; /* <-- Only left and right */\n    box-sizing: border-box; /* Includes padding and border in the width calculation */\n    overflow: hidden;\n}\n\n\n.action-mode-buttons {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 15px;\n    padding: 20px 0;\n}\n\n.action-mode-buttons button {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 8px;\n    background-color: #e0e0e0;\n    color: #333;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.action-mode-buttons button:hover {\n    background-color: #c8e6c9;\n}\n\n.action-mode-buttons button.selected {\n    background-color: #4caf50;\n    color: white;\n}\n\n.alignment-image-wrapper {\n    width: auto;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333;\n    position: relative;\n    transition: all 0.3s ease;\n}\n\n#alignmentImage {\n    width: auto;\n    height: 100%;\n    object-fit: contain;\n    display: block;\n    transition: all 0.3s ease;\n}\n\n#fullscreenBtn {\n    position: absolute;\n    width: 40px;\n    height: 40px;\n    top: 10px;\n    right: 10px;\n    color: white; /* White text */\n    font-size: 20px;\n    border: 2px solid white;\n    border-radius: 50%;\n    background-color: #4a90e2; /* Blue background */\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px 10px 12px 10px;\n    transition: background-color 0.3s ease, transform 0.2s ease; /* Add a transform for hover effect */\n}\n\n#fullscreenBtn:hover {\n    background-color: rgba(0, 100, 0);\n}\n\n.alignment-image-wrapper.fullscreen {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.9);\n    z-index: 9999;\n}\n\n.alignment-image-wrapper.fullscreen #alignmentImage {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n}\n\n</style>\n    <!-- Link to sidebar specific styles -->\n    <style type=\"text/css\">\n/* Sidebar with 12% width, blue background, and matching rounded corners */\n.sidebar {\n    width: 12%; /* Increased to 12% */\n    background-color: #4a90e2;\n    height: 100vh; /* Full viewport height */\n    border-top-left-radius: 15px;\n    border-bottom-left-radius: 15px;\n    padding: 10px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    overflow-x: auto; /* Allow horizontal scroll */\n}\n\n/* Header text */\n.sidebar-header {\n    font-size: 24px;\n    font-weight: bold;\n    color: white;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n/* Sidebar items container (scrollable) */\n.sidebar-items {\n    overflow-y: auto;\n    overflow-x: auto; /* Allow horizontal scroll for long items */\n    max-height: calc(100% - 80px);\n    padding-right: 5px; /* Optional: spacing for scroll bar */\n}\n\n/* Sidebar items */\n.sidebar-item {\n    width: 100%; /* Full width inside sidebar */\n    min-width: max-content; /* Ensures the button fits the text */\n    margin: 10px 0;\n    padding: 15px 20px;\n    background-color: #d3d3d3;\n    color: black;\n    font-size: 12px;\n    font-weight: bold;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: background-color 0.3s ease, transform 0.2s ease;\n    text-align: center;\n\n    white-space: nowrap; /* Prevent line wrapping */\n    overflow: visible; /* Allow overflow */\n    text-overflow: unset; /* No ellipsis */\n}\n\n/* Hover effect for sidebar items */\n.sidebar-item:hover {\n    background-color: #b0b0b0;\n    transform: scale(0.95);\n}\n\n/* Active item style */\n.sidebar-item.active {\n    background-color: #3cb371;\n    color: white;\n}\n\n</style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <!-- Sidebar on the left with blue background -->\n        <div class=\"sidebar\">\n            <div class=\"sidebar-header\">Items</div>\n            <div id=\"sidebar-items\" class=\"sidebar-items\">\n            </div>\n        </div>\n\n        <!-- Right-side content container -->\n        <div class=\"right-content\">\n            <!-- Top div with buttons -->\n            <div class=\"top-div\">\n                <button class=\"selected\" id=\"content-validation-btn\">Content Validation</button>\n                <button id=\"alignment-validation-btn\">Alignment Validation</button>\n            </div>\n\n            <!-- Middle content section -->\n            <div class=\"middle-content\">\n                <!-- Content Validation div -->\n                <div class=\"content-div\" id=\"content-div\">\n                    <div class=\"image-container\">\n                        <img id=\"mainImage\" src=\"\" alt=\"Main Image\" />\n                        <img id=\"circleImage\" />\n                    </div>\n\n                    <div class=\"report-container\">\n                        <img id=\"reportImage\" src=\"\" alt=\"Report Image\" />\n                        <img id=\"reportCircleImage\" />\n                    </div>\n                </div>\n\n                <!-- Alignment Validation div -->\n                <div class=\"alignment-div\" id=\"alignment-div\">\n                    <div class=\"action-mode-buttons\" id=\"actionModeButtons\">\n                        <button id=\"pressHoldBtn\" class=\"selected\">Press and Hold</button>\n                        <button id=\"highlightBtn\">Highlight</button>\n                    </div>\n                    \n                    <div class=\"alignment-image-wrapper\">\n                        <img id=\"alignmentImage\" src=\"\" />\n                        <button id=\"fullscreenBtn\" title=\"Fullscreen\">⛶</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Bottom div with navigation buttons -->\n            <div class=\"bottom-div\">\n                <div class=\"navigation-buttons\">\n                    <button id=\"prev-page\" disabled>Previous</button>\n                    <span id=\"page-info\">Page 1 of 1</span>\n                    <button id=\"next-page\" disabled>Next</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Link to script files -->\n    <script type=\"text/javascript\">\n// JavaScript to toggle content and alignment validation\nconst contentValidationBtn = document.getElementById('content-validation-btn');\nconst alignmentValidationBtn = document.getElementById('alignment-validation-btn');\nconst contentDiv = document.getElementById('content-div');\nconst alignmentDiv = document.getElementById('alignment-div');\n\n// Function to show Content Validation\ncontentValidationBtn.addEventListener('click', () => {\n    contentDiv.style.display = 'flex';\n    alignmentDiv.style.display = 'none';\n    contentValidationBtn.classList.add('selected');\n    alignmentValidationBtn.classList.remove('selected');\n    updateImageProperties();\n});\n\n// Function to show Alignment Validation\nalignmentValidationBtn.addEventListener('click', () => {\n    contentDiv.style.display = 'none';\n    alignmentDiv.style.display = 'flex';\n    alignmentValidationBtn.classList.add('selected');\n    contentValidationBtn.classList.remove('selected');\n});\n\n</script></script>\n    <script src=\"scripts/data-map.js\"></script>\n    <script type=\"text/javascript\">\n// main.js (or wherever you are putting this)\n\n// Assuming itemImageMap is already available in the scope\n\nlet currentSet = {};\nlet currentPageIndex = 0;\nlet totalPages = 0;\nlet currentPage = 1;  // Reset currentPage to 1\n\n// Function to create sidebar items dynamically\nfunction createSidebarItems() {\n    const sidebarItemsContainer = document.getElementById('sidebar-items');\n\n    // Iterate through the map and create items\n    itemImageMap.forEach((value, key) => {\n        const itemElement = document.createElement('div');\n        itemElement.classList.add('sidebar-item');\n        itemElement.id = `item-${key.toLowerCase().replace(' ', '-')}`;\n        itemElement.textContent = key;\n\n        // Add event listener for item selection\n        itemElement.addEventListener('click', () => {\n            selectItem(key, itemElement);\n        });\n\n        sidebarItemsContainer.appendChild(itemElement);\n    });\n\n    // Set the first item as active by default\n    const firstItem = sidebarItemsContainer.querySelector('.sidebar-item');\n    if (firstItem) {\n        const firstKey = firstItem.textContent;\n        selectItem(firstKey, firstItem);\n    }\n}\n\n// Function to handle item selection\nfunction selectItem(key, itemElement) {\n    // Remove active class from all sidebar items\n    document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));\n\n    // Add active class to the clicked item\n    itemElement.classList.add('active');\n\n    // Reset currentPage to 1\n    currentPage = 1;\n\n    // Get the current set from the clicked item\n    currentSet = itemImageMap.get(key);\n\n    // Calculate totalPages based on validationImages length\n    totalPages = currentSet.validationImages.length;\n\n    // Update navigation buttons and page info\n    updateNavigation();\n\n    // (Optional) Display alert with current set details\n    console.log(`Item: ${key}, Total Pages: ${totalPages}, Current Page: ${currentPage}`);\n}\n\n// Call the function to populate the sidebar after the DOM has loaded\ndocument.addEventListener('DOMContentLoaded', function(){\n    createSidebarItems();\n});\n\n</script></script>\n    <script type=\"text/javascript\">\n// Flag to track if \"Press and Hold\" is selected\nlet isPressAndHoldSelected = true; // Assume true initially (or set based on default state)\n\n// Get all buttons inside the action-mode-buttons container\nconst actionButtons = document.querySelectorAll('.action-mode-buttons button');\n\n// Add click event listener to each button\nactionButtons.forEach(button => {\n    button.addEventListener('click', () => {\n        // Remove 'selected' class from all buttons\n        actionButtons.forEach(btn => btn.classList.remove('selected'));\n\n        // Add 'selected' class to the clicked button\n        button.classList.add('selected');\n\n        // Update flag based on the selected button\n        if (button.id === 'pressHoldBtn') {\n            isPressAndHoldSelected = true; // \"Press and Hold\" is selected\n        } else if (button.id === 'highlightBtn') {\n            isPressAndHoldSelected = false; // \"Highlight\" is selected\n        }\n\n        // Update the alignment image when the action mode changes\n        updateAlignmentImage(currentSet, currentPage);\n    });\n});\n\n// Function to get the alignment image for the current page based on the flag\nfunction getAlignmentImage(currentSet, currentPage) {\n    // Ensure we are not trying to access an out-of-bounds index\n    const alignmentImages = currentSet.alignmentImages[currentPage - 1];\n\n    // Check if the alignment image exists for the given page\n    if (alignmentImages && alignmentImages.length > 2) {\n        // Use the flag to return the correct alignment image\n        return alignmentImages[isPressAndHoldSelected ? 0 : 2]; // Return 0th image if flag is true, else 1st\n    } else {\n        console.warn(`No alignment image found for page ${currentPage}`);\n        return null;\n    }\n}\n\n// Function to update the alignment image\nfunction updateAlignmentImage(currentSet, currentPage) {\n    const alignmentImageWrapper = document.querySelector('.alignment-image-wrapper');\n    const alignmentImage = document.getElementById('alignmentImage');\n\n    if (alignmentImageWrapper && alignmentImage) {\n        const currentAlignmentImage = getAlignmentImage(currentSet, currentPage);\n\n        if (currentAlignmentImage) {\n            alignmentImage.src = currentAlignmentImage;\n        } else {\n            alignmentImage.src = null;\n            console.warn(`No alignment image found for page ${currentPage}`);\n        }\n    }\n}\n\n// Handle press-and-hold toggle for alignment image\nconst alignmentImage = document.getElementById('alignmentImage');\n\n// Track whether the mouse is currently pressed\nlet isMousePressed = false;\n\n// Add mousedown and mouseup events to handle press and hold\nalignmentImage.addEventListener('mousedown', () => {\n    if (isPressAndHoldSelected) {\n        isMousePressed = true;\n        // Change the image to the second one when the mouse is pressed down\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\n        if (alignmentImages && alignmentImages.length > 1) {\n            alignmentImage.src = alignmentImages[1]; // Show the second image\n        }\n    }\n});\n\nalignmentImage.addEventListener('mouseup', () => {\n    if (isPressAndHoldSelected && isMousePressed) {\n        isMousePressed = false;\n        // Revert back to the first image when the mouse is released\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\n        if (alignmentImages && alignmentImages.length > 1) {\n            alignmentImage.src = alignmentImages[0]; // Show the first image\n        }\n    }\n});\n\nalignmentImage.addEventListener('mouseleave', () => {\n    if (isMousePressed) {\n        // Reset the image if the mouse leaves the alignmentImage while pressed\n        isMousePressed = false;\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\n        if (alignmentImages && alignmentImages.length > 1) {\n            alignmentImage.src = alignmentImages[0]; // Revert to the first image\n        }\n    }\n});\n\n</script></script>\n    <script type=\"text/javascript\">\n// navigation.js\n\n// Function to update page info and button states\nfunction updateNavigation() {\n    const prevButton = document.getElementById(\"prev-page\");\n    const nextButton = document.getElementById(\"next-page\");\n    const pageInfo = document.getElementById(\"page-info\");\n\n    // Update page info text\n    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;\n\n    // Enable or disable Previous button\n    prevButton.disabled = currentPage <= 1;\n    nextButton.disabled = currentPage >= totalPages;\n\n    // Also update images when navigation changes\n    updateImages();\n    updateAlignmentImage(currentSet, currentPage);\n    // updateImageProperties();\n}\n\n// Function to update mainImage and reportImage based on current page\nfunction updateImages() {\n    const mainImage = document.getElementById(\"mainImage\");\n    const reportImage = document.getElementById(\"reportImage\");\n\n    if (!currentSet || !currentSet.validationImages || currentSet.validationImages.length === 0) {\n        console.warn(\"No images to update.\");\n        mainImage.src = null;\n        reportImage.src = null;\n        return;\n    }\n\n    \n\n    const currentImages = currentSet.validationImages[currentPage - 1];\n\n    if (currentImages) {\n        mainImage.src = `${currentImages[0]}`;\n        reportImage.src = `${currentImages[1]}`;\n    } else {\n        console.warn(`No images found for page ${currentPage}`);\n    }\n}\n\n// Event listeners for buttons\ndocument.getElementById(\"prev-page\").addEventListener(\"click\", () => {\n    if (currentPage > 1) {\n        currentPage--;\n        updateNavigation();\n    }\n});\n\ndocument.getElementById(\"next-page\").addEventListener(\"click\", () => {\n    if (currentPage < totalPages) {\n        currentPage++;\n        updateNavigation();\n    }\n});\n\n</script></script>\n    <script type=\"text/javascript\">\nconst mainImage = document.getElementById('mainImage');\nconst circleImage = document.getElementById('circleImage');\nconst reportImage = document.getElementById('reportImage');\nconst reportCircleImage = document.getElementById('reportCircleImage');\n\n// Zoom config\nconst zoomFactor = 2;\nconst circleSize = 200;\nconst sourceWidth = circleSize / zoomFactor;\nconst sourceHeight = circleSize / zoomFactor;\n\n// Main image variables\nlet imageWidth = 0;\nlet imageHeight = 0;\nlet imageSrc = \"\";\nlet rect = {};\n\n// Report image variables\nlet reportWidth = 0;\nlet reportHeight = 0;\nlet reportSrc = \"\";\nlet reportRect = {};\n\n// Load image properties\nfunction updateImageProperties() {\n  imageWidth = mainImage.width;\n  imageHeight = mainImage.height;\n  imageSrc = mainImage.src;\n  rect = mainImage.getBoundingClientRect();\n}\nmainImage.onload = updateImageProperties;\nif (mainImage.complete) updateImageProperties();\n\n// Load report image properties\nfunction updateReportProperties() {\n  reportWidth = reportImage.width;\n  reportHeight = reportImage.height;\n  reportSrc = reportImage.src;\n  reportRect = reportImage.getBoundingClientRect();\n}\nreportImage.onload = updateReportProperties;\nif (reportImage.complete) updateReportProperties();\n\n// Update zoom for main image\nfunction updateZoomedView(x, y) {\n  let roundedX = Math.round(x);\n  let roundedY = Math.round(y);\n\n  roundedX = Math.max(sourceWidth / 2, Math.min(imageWidth - sourceWidth / 2, roundedX));\n  roundedY = Math.max(sourceHeight / 2, Math.min(imageHeight - sourceHeight / 2, roundedY));\n\n  const sourceX = roundedX - sourceWidth / 2;\n  const sourceY = roundedY - sourceHeight / 2;\n\n  circleImage.style.backgroundImage = `url(${imageSrc})`;\n  circleImage.style.backgroundSize = `${imageWidth * zoomFactor}px ${imageHeight * zoomFactor}px`;\n  circleImage.style.backgroundPosition = `-${sourceX * zoomFactor}px -${sourceY * zoomFactor}px`;\n  circleImage.style.backgroundRepeat = 'no-repeat';\n\n  circleImage.style.width = `${circleSize}px`;\n  circleImage.style.height = `${circleSize}px`;\n  const circlePosX = Math.round(rect.left + (x - circleSize / 2));\n  const circlePosY = Math.round(rect.top + (y - circleSize / 2));\n\n  circleImage.style.left = `${circlePosX}px`;\n  circleImage.style.top = `${circlePosY}px`;\n  circleImage.style.display = 'block';\n}\n\n// Update zoom for report image\nfunction updateReportZoom(x, y) {\n  let roundedX = Math.round(x);\n  let roundedY = Math.round(y);\n\n  roundedX = Math.max(sourceWidth / 2, Math.min(reportWidth - sourceWidth / 2, roundedX));\n  roundedY = Math.max(sourceHeight / 2, Math.min(reportHeight - sourceHeight / 2, roundedY));\n\n  const sourceX = roundedX - sourceWidth / 2;\n  const sourceY = roundedY - sourceHeight / 2;\n\n  reportCircleImage.style.backgroundImage = `url(${reportSrc})`;\n  reportCircleImage.style.backgroundSize = `${reportWidth * zoomFactor}px ${reportHeight * zoomFactor}px`;\n  reportCircleImage.style.backgroundPosition = `-${sourceX * zoomFactor}px -${sourceY * zoomFactor}px`;\n  reportCircleImage.style.backgroundRepeat = 'no-repeat';\n\n  reportCircleImage.style.width = `${circleSize}px`;\n  reportCircleImage.style.height = `${circleSize}px`;\n  const circlePosX = Math.round(reportRect.left + (x - circleSize / 2));\n  const circlePosY = Math.round(reportRect.top + (y - circleSize / 2));\n\n  reportCircleImage.style.left = `${circlePosX}px`;\n  reportCircleImage.style.top = `${circlePosY}px`;\n  reportCircleImage.style.display = 'block';\n}\n\n// Events for main image\nmainImage.addEventListener('mousemove', (event) => {\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  updateZoomedView(x, y);\n});\nmainImage.addEventListener('mouseleave', () => {\n  circleImage.style.display = 'none';\n});\n\n// Events for report image\nreportImage.addEventListener('mousemove', (event) => {\n  const x = event.clientX - reportRect.left;\n  const y = event.clientY - reportRect.top;\n  updateReportZoom(x, y);\n});\nreportImage.addEventListener('mouseleave', () => {\n  reportCircleImage.style.display = 'none';\n});\n\n</script></script>\n    <script type=\"text/javascript\">\ndocument.getElementById(\"fullscreenBtn\").addEventListener(\"click\", function() {\n    var wrapper = document.querySelector(\".alignment-image-wrapper\");\n    var icon = document.getElementById(\"fullscreenBtn\");\n    \n    // Toggle fullscreen class on wrapper\n    wrapper.classList.toggle(\"fullscreen\");\n    \n    // Toggle icon to indicate fullscreen state\n    if (wrapper.classList.contains(\"fullscreen\")) {\n        icon.textContent = \"⛔\"; // Change to \"Exit Fullscreen\" icon (or any icon of your choice)\n    } else {\n        icon.textContent = \"⛶\"; // Original fullscreen icon\n    }\n});\n\n</script></script>\n</body>\n\n</html>\n";
}