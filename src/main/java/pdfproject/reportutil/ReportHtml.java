package pdfproject.reportutil;

public class ReportHtml {
    public static final String REPORT_HTML = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head><style>\r\n/* Setting a darker shade of white for the body */\r\nbody {\r\n    background-color: #f4f4f4; /* A bit darker than white */\r\n    margin: 0; /* Removing default margin */\r\n    padding: 0;\r\n    height: 100vh; /* Ensure full viewport height */\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center; /* Center content vertically */\r\n    font-family: 'Arial', sans-serif; /* Modern sans-serif font */\r\n}\r\n\r\n/* Container div with 95% width and 95% height of the viewport */\r\n.container {\r\n    width: 95vw; /* 95% of viewport width */\r\n    height: 95vh; /* 95% of viewport height */\r\n    background-color: #ffffff; /* White background for the div */\r\n    box-sizing: border-box; /* Ensure margin is inside the div */\r\n    display: flex;\r\n    justify-content: center; /* Align items horizontally */\r\n    align-items: center; /* Center content vertically */\r\n    border-radius: 15px; /* Rounded corners for a soft modern look */\r\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */\r\n    transition: box-shadow 0.3s ease; /* Smooth transition for shadow */\r\n}\r\n\r\n\r\n/* Right-side div with 90% width */\r\n.right-content {\r\n    width: 90%; /* 90% width */\r\n    height: 100%; /* Full height */\r\n    display: flex;\r\n    flex-direction: column; /* Stack elements vertically */\r\n}\r\n\r\n/* Top div */\r\n.top-div {\r\n    display: flex;\r\n    flex-direction: row; /* Arrange buttons horizontally */\r\n    justify-content: center; /* Center buttons horizontally */\r\n    align-items: center; /* Center buttons vertically */\r\n    padding: 10px 0; /* Small padding for some spacing */\r\n    height: auto; /* Allow height to adjust based on content */\r\n    width: 100%; /* Full width */\r\n}\r\n\r\n/* Styling only the buttons inside the top div */\r\n.top-div button {\r\n    padding: 15px 30px; /* Horizontal padding to make buttons bigger */\r\n    margin: 0 10px; /* Small margin between buttons */\r\n    font-size: 18px; /* Larger font size for readability */\r\n    border: none; /* Remove default border */\r\n    border-radius: 8px; /* Rounded corners for modern look */\r\n    background-color: #d3d3d3; /* Grey background color for unselected buttons */\r\n    color: white; /* White text color */\r\n    cursor: pointer; /* Pointer cursor on hover */\r\n    transition: background-color 0.3s ease; /* Smooth transition for background color */\r\n}\r\n\r\n/* Selected button style (green) */\r\n.top-div button.selected {\r\n    background-color: #28a745; /* Green background color */\r\n}\r\n\r\n/* Hover effect for buttons inside top div */\r\n.top-div button:hover {\r\n    background-color: #146544; /* Darker grey on hover */\r\n    transform: scale(.95); /* Slight scale-up effect */\r\n}\r\n\r\n/* Bottom div */\r\n.bottom-div {\r\n    display: flex; /* Flexbox for bottom div */\r\n    justify-content: center; /* Center navigation elements */\r\n    align-items: center; /* Center items vertically */\r\n    width: 100%; /* Full width */\r\n    padding: 10px 0; /* Small padding for some spacing */\r\n}\r\n\r\n/* Navigation buttons container */\r\n.navigation-buttons {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px; /* Gap between buttons and page info */\r\n}\r\n\r\n/* Styling for individual navigation buttons */\r\n.navigation-buttons button {\r\n    padding: 10px 20px; /* Padding for buttons */\r\n    font-size: 16px; /* Font size for readability */\r\n    background-color: #4a90e2; /* Blue background */\r\n    color: white; /* White text color */\r\n    border: none; /* Remove border */\r\n    border-radius: 8px; /* Rounded corners */\r\n    cursor: pointer; /* Pointer cursor on hover */\r\n    transition: background-color 0.3s ease; /* Smooth transition */\r\n}\r\n\r\n/* Hover effect for navigation buttons */\r\n.navigation-buttons button:hover {\r\n    background-color: #357ab7; /* Darker blue on hover */\r\n}\r\n\r\n/* Styling for the page info text */\r\n.navigation-buttons #page-info {\r\n    font-size: 16px;\r\n    color: #333; /* Dark text color for readability */\r\n}\r\n\r\n/* Disabled button styles */\r\n.navigation-buttons button:disabled {\r\n    background-color: #cccccc; /* Light gray */\r\n    color: #666666;             /* Darker text */\r\n    cursor: not-allowed;\r\n}\r\n/* Middle content section */\r\n.middle-content {\r\n    flex: 1; \r\n    overflow-y: auto;\r\n    display: flex; /* Make sure middle-content itself is a flex container */\r\n    flex-direction: column; /* Stack content-div and alignment-div vertically */\r\n}\r\n\r\n\r\n\r\n/* Content div with fixed width */\r\n.content-div {\r\n    display: flex; /* Flexbox layout */\r\n    flex-direction: row; /* Horizontal layout */\r\n    gap: 20px; /* Space between image and report containers */\r\n    width: 100%; /* 100% width of its parent container */\r\n    height: 100%; /* Full height of its parent container */\r\n    padding: 0 10px; /* <-- Only left and right */\r\n    box-sizing: border-box; /* Includes padding and border in the width calculation */\r\n    overflow: hidden; /* Prevents overflow if any */\r\n}\r\n\r\n/* Image container (2/3 width) */\r\n.image-container {\r\n    width: 66.66%; /* Fixed width 2/3 of the container */\r\n    height: 100%; /* Full height of its parent container */\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Image to fit in the container */\r\n#mainImage {\r\n    width: 100%; /* Ensure the image fits container width */\r\n    max-height: 100%; /* Ensure the image fits container height */\r\n    object-fit: contain; /* Maintain aspect ratio */\r\n    background-color: black;\r\n}\r\n#circleImage {\r\n    position: absolute;\r\n    display: none;\r\n    border-radius: 50%;\r\n    object-fit: contain;\r\n    pointer-events: none;\r\n  }\r\n/* Report container (1/3 width) */\r\n.report-container {\r\n    width: 33.33%; /* Fixed width 1/3 of the container */\r\n    height: 100%; /* Full height of its parent container */\r\n    display: block;\r\n    justify-content: flex-start; /* Align from top */\r\n    overflow-y: auto; /* Enable vertical scrolling */\r\n}\r\n\r\n/* Report image */\r\n.report-container img {\r\n    width: 100%; /* Image width 100% */\r\n    height: auto; /* Maintain aspect ratio */\r\n    object-fit: cover; /* Image fills container, maintaining aspect ratio */\r\n    object-position: top; /* Align the image from the top */\r\n    max-height: none; /* Ensure no height restriction */\r\n}\r\n.alignment-div {\r\n    display: none;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 0 10px; /* <-- Only left and right */\r\n    box-sizing: border-box; /* Includes padding and border in the width calculation */\r\n    overflow: hidden;\r\n}\r\n\r\n\r\n.action-mode-buttons {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 15px;\r\n    padding: 20px 0;\r\n}\r\n\r\n.action-mode-buttons button {\r\n    padding: 10px 20px;\r\n    border: none;\r\n    border-radius: 8px;\r\n    background-color: #e0e0e0;\r\n    color: #333;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease, color 0.3s ease;\r\n}\r\n\r\n.action-mode-buttons button:hover {\r\n    background-color: #c8e6c9;\r\n}\r\n\r\n.action-mode-buttons button.selected {\r\n    background-color: #4caf50;\r\n    color: white;\r\n}\r\n\r\n.alignment-image-wrapper {\r\n    width: auto;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #333;\r\n    position: relative;\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n#alignmentImage {\r\n    width: auto;\r\n    height: 100%;\r\n    object-fit: contain;\r\n    display: block;\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n#fullscreenBtn {\r\n    position: absolute;\r\n    width: 40px;\r\n    height: 40px;\r\n    top: 10px;\r\n    right: 10px;\r\n    color: white; /* White text */\r\n    font-size: 20px;\r\n    border: 2px solid white;\r\n    border-radius: 50%;\r\n    background-color: #4a90e2; /* Blue background */\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 10px 12px 10px;\r\n    transition: background-color 0.3s ease, transform 0.2s ease; /* Add a transform for hover effect */\r\n}\r\n\r\n#fullscreenBtn:hover {\r\n    background-color: rgba(0, 100, 0);\r\n}\r\n\r\n.alignment-image-wrapper.fullscreen {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.9);\r\n    z-index: 9999;\r\n}\r\n\r\n.alignment-image-wrapper.fullscreen #alignmentImage {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n}\r\n/* Sidebar with 10% width, blue background, and matching rounded corners */\r\n.sidebar {\r\n    width: 10%; /* 10% width */\r\n    background-color: #4a90e2; /* Blue background */\r\n    height: 100%; /* Full height */\r\n    border-top-left-radius: 15px; /* Matching top-left rounded corner */\r\n    border-bottom-left-radius: 15px; /* Matching bottom-left rounded corner */\r\n    padding: 10px; /* Padding for overall sidebar */\r\n    box-sizing: border-box; /* Include padding in width calculation */\r\n    display: flex;\r\n    flex-direction: column; /* Arrange items vertically */\r\n}\r\n\r\n/* Header text */\r\n.sidebar-header {\r\n    font-size: 24px; /* Large text size */\r\n    font-weight: bold; /* Bold text */\r\n    color: white; /* White color for the header */\r\n    margin-bottom: 20px; /* Space below the header */\r\n    text-align: center; /* Center the header */\r\n}\r\n\r\n/* Sidebar items container (scrollable) */\r\n.sidebar-items {\r\n    overflow-y: auto; /* Enable vertical scroll */\r\n    max-height: calc(100% - 80px); /* Ensures space for header */\r\n}\r\n\r\n/* Sidebar items */\r\n.sidebar-item {\r\n    width: 60%; /* Items take 90% width of the sidebar */\r\n    margin: 10px 0; /* Space between items */\r\n    padding: 15px 20px; /* Padding for each item */\r\n    background-color: #d3d3d3; /* Default grey background */\r\n    color: black; /* Black text color */\r\n    font-size: 16px; /* Font size for the items */\r\n    font-weight: bold; /* Bold text inside the items */\r\n    border-radius: 8px; /* Rounded corners with more radius */\r\n    cursor: pointer; /* Pointer cursor on hover */\r\n    transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth background and scale transition */\r\n    text-align: center; /* Centered text */\r\n    white-space: nowrap; /* Prevent text from wrapping */\r\n    overflow: hidden; /* Hide overflow text */\r\n    text-overflow: ellipsis; /* Show ellipsis if the text overflows */\r\n}\r\n\r\n/* Hover effect for sidebar items */\r\n.sidebar-item:hover {\r\n    background-color: #b0b0b0; /* Darker grey on hover */\r\n    transform: scale(.95); /* Slight scale-up effect */\r\n}\r\n\r\n/* Active item style (green background) */\r\n.sidebar-item.active {\r\n    background-color: #3cb371; /* Green background for active item */\r\n    color: white; /* White text for active item */\r\n}\r\n\r\n</style>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Interactive Report</title>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"container\">\r\n        <!-- Sidebar on the left with blue background -->\r\n        <div class=\"sidebar\">\r\n            <div class=\"sidebar-header\">Items</div>\r\n            <div id=\"sidebar-items\" class=\"sidebar-items\">\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Right-side content container -->\r\n        <div class=\"right-content\">\r\n            <!-- Top div with buttons -->\r\n            <div class=\"top-div\">\r\n                <button class=\"selected\" id=\"content-validation-btn\">Content Validation</button>\r\n                <button id=\"alignment-validation-btn\">Alignment Validation</button>\r\n            </div>\r\n\r\n            <!-- Middle content section -->\r\n            <div class=\"middle-content\">\r\n                <!-- Content Validation div -->\r\n                <div class=\"content-div\" id=\"content-div\">\r\n                    <div class=\"image-container\">\r\n                        <img id=\"mainImage\" src=\"\" alt=\"Main Image\" />\r\n                        <img id=\"circleImage\" />\r\n                    </div>\r\n\r\n                    <div class=\"report-container\">\r\n                        <img id=\"reportImage\" src=\"\" alt=\"Report Image\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Alignment Validation div -->\r\n                <div class=\"alignment-div\" id=\"alignment-div\">\r\n                    <div class=\"action-mode-buttons\" id=\"actionModeButtons\">\r\n                        <button id=\"pressHoldBtn\" class=\"selected\">Press and Hold</button>\r\n                        <button id=\"highlightBtn\">Highlight</button>\r\n                    </div>\r\n                    \r\n                    <div class=\"alignment-image-wrapper\">\r\n                        <img id=\"alignmentImage\" src=\"\" />\r\n                        <button id=\"fullscreenBtn\" title=\"Fullscreen\">\u26f6</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Bottom div with navigation buttons -->\r\n            <div class=\"bottom-div\">\r\n                <!-- Navigation Buttons -->\r\n                <div class=\"navigation-buttons\">\r\n                    <button id=\"prev-page\" disabled>Previous</button>\r\n                    <span id=\"page-info\">Page 1 of 1</span>\r\n                    <button id=\"next-page\" disabled>Next</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <script src=\"data-map.js\"></script>\r\n<script>\r\n// JavaScript to toggle content and alignment validation\r\nconst contentValidationBtn = document.getElementById('content-validation-btn');\r\nconst alignmentValidationBtn = document.getElementById('alignment-validation-btn');\r\nconst contentDiv = document.getElementById('content-div');\r\nconst alignmentDiv = document.getElementById('alignment-div');\r\n\r\n// Function to show Content Validation\r\ncontentValidationBtn.addEventListener('click', () => {\r\n    contentDiv.style.display = 'flex';\r\n    alignmentDiv.style.display = 'none';\r\n    contentValidationBtn.classList.add('selected');\r\n    alignmentValidationBtn.classList.remove('selected');\r\n    updateImageProperties();\r\n});\r\n\r\n// Function to show Alignment Validation\r\nalignmentValidationBtn.addEventListener('click', () => {\r\n    contentDiv.style.display = 'none';\r\n    alignmentDiv.style.display = 'flex';\r\n    alignmentValidationBtn.classList.add('selected');\r\n    contentValidationBtn.classList.remove('selected');\r\n});\r\n\r\n// Assuming itemImageMap is already available in the scope\r\n\r\nlet currentSet = {};\r\nlet currentPageIndex = 0;\r\nlet totalPages = 0;\r\nlet currentPage = 1;  // Reset currentPage to 1\r\n\r\n// Function to create sidebar items dynamically\r\nfunction createSidebarItems() {\r\n    const sidebarItemsContainer = document.getElementById('sidebar-items');\r\n\r\n    // Iterate through the map and create items\r\n    itemImageMap.forEach((value, key) => {\r\n        const itemElement = document.createElement('div');\r\n        itemElement.classList.add('sidebar-item');\r\n        itemElement.id = `item-${key.toLowerCase().replace(' ', '-')}`;\r\n        itemElement.textContent = key;\r\n\r\n        // Add event listener for item selection\r\n        itemElement.addEventListener('click', () => {\r\n            selectItem(key, itemElement);\r\n        });\r\n\r\n        sidebarItemsContainer.appendChild(itemElement);\r\n    });\r\n\r\n    // Set the first item as active by default\r\n    const firstItem = sidebarItemsContainer.querySelector('.sidebar-item');\r\n    if (firstItem) {\r\n        const firstKey = firstItem.textContent;\r\n        selectItem(firstKey, firstItem);\r\n    }\r\n}\r\n\r\n// Function to handle item selection\r\nfunction selectItem(key, itemElement) {\r\n    // Remove active class from all sidebar items\r\n    document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));\r\n\r\n    // Add active class to the clicked item\r\n    itemElement.classList.add('active');\r\n\r\n    // Reset currentPage to 1\r\n    currentPage = 1;\r\n\r\n    // Get the current set from the clicked item\r\n    currentSet = itemImageMap.get(key);\r\n\r\n    // Calculate totalPages based on validationImages length\r\n    totalPages = currentSet.validationImages.length;\r\n\r\n    // Update navigation buttons and page info\r\n    updateNavigation();\r\n\r\n    // (Optional) Display alert with current set details\r\n    console.log(`Item: ${key}, Total Pages: ${totalPages}, Current Page: ${currentPage}`);\r\n}\r\n\r\n// Call the function to populate the sidebar after the DOM has loaded\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n    createSidebarItems();\r\n});\r\n// Flag to track if \"Press and Hold\" is selected\r\nlet isPressAndHoldSelected = true; // Assume true initially (or set based on default state)\r\n\r\n// Get all buttons inside the action-mode-buttons container\r\nconst actionButtons = document.querySelectorAll('.action-mode-buttons button');\r\n\r\n// Add click event listener to each button\r\nactionButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        // Remove 'selected' class from all buttons\r\n        actionButtons.forEach(btn => btn.classList.remove('selected'));\r\n\r\n        // Add 'selected' class to the clicked button\r\n        button.classList.add('selected');\r\n\r\n        // Update flag based on the selected button\r\n        if (button.id === 'pressHoldBtn') {\r\n            isPressAndHoldSelected = true; // \"Press and Hold\" is selected\r\n        } else if (button.id === 'highlightBtn') {\r\n            isPressAndHoldSelected = false; // \"Highlight\" is selected\r\n        }\r\n\r\n        // Update the alignment image when the action mode changes\r\n        updateAlignmentImage(currentSet, currentPage);\r\n    });\r\n});\r\n\r\n// Function to get the alignment image for the current page based on the flag\r\nfunction getAlignmentImage(currentSet, currentPage) {\r\n    // Ensure we are not trying to access an out-of-bounds index\r\n    const alignmentImages = currentSet.alignmentImages[currentPage - 1];\r\n\r\n    // Check if the alignment image exists for the given page\r\n    if (alignmentImages && alignmentImages.length > 2) {\r\n        // Use the flag to return the correct alignment image\r\n        return alignmentImages[isPressAndHoldSelected ? 0 : 2]; // Return 0th image if flag is true, else 1st\r\n    } else {\r\n        console.warn(`No alignment image found for page ${currentPage}`);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Function to update the alignment image\r\nfunction updateAlignmentImage(currentSet, currentPage) {\r\n    const alignmentImageWrapper = document.querySelector('.alignment-image-wrapper');\r\n    const alignmentImage = document.getElementById('alignmentImage');\r\n\r\n    if (alignmentImageWrapper && alignmentImage) {\r\n        const currentAlignmentImage = getAlignmentImage(currentSet, currentPage);\r\n\r\n        if (currentAlignmentImage) {\r\n            alignmentImage.src = currentAlignmentImage;\r\n        } else {\r\n            console.warn(`No alignment image found for page ${currentPage}`);\r\n        }\r\n    }\r\n}\r\n\r\n// Handle press-and-hold toggle for alignment image\r\nconst alignmentImage = document.getElementById('alignmentImage');\r\n\r\n// Track whether the mouse is currently pressed\r\nlet isMousePressed = false;\r\n\r\n// Add mousedown and mouseup events to handle press and hold\r\nalignmentImage.addEventListener('mousedown', () => {\r\n    if (isPressAndHoldSelected) {\r\n        isMousePressed = true;\r\n        // Change the image to the second one when the mouse is pressed down\r\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\r\n        if (alignmentImages && alignmentImages.length > 1) {\r\n            alignmentImage.src = alignmentImages[1]; // Show the second image\r\n        }\r\n    }\r\n});\r\n\r\nalignmentImage.addEventListener('mouseup', () => {\r\n    if (isPressAndHoldSelected && isMousePressed) {\r\n        isMousePressed = false;\r\n        // Revert back to the first image when the mouse is released\r\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\r\n        if (alignmentImages && alignmentImages.length > 1) {\r\n            alignmentImage.src = alignmentImages[0]; // Show the first image\r\n        }\r\n    }\r\n});\r\n\r\nalignmentImage.addEventListener('mouseleave', () => {\r\n    if (isMousePressed) {\r\n        // Reset the image if the mouse leaves the alignmentImage while pressed\r\n        isMousePressed = false;\r\n        const alignmentImages = currentSet.alignmentImages[currentPage - 1];\r\n        if (alignmentImages && alignmentImages.length > 1) {\r\n            alignmentImage.src = alignmentImages[0]; // Revert to the first image\r\n        }\r\n    }\r\n});\r\n// navigation.js\r\n\r\n// Function to update page info and button states\r\nfunction updateNavigation() {\r\n    const prevButton = document.getElementById(\"prev-page\");\r\n    const nextButton = document.getElementById(\"next-page\");\r\n    const pageInfo = document.getElementById(\"page-info\");\r\n\r\n    // Update page info text\r\n    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;\r\n\r\n    // Enable or disable Previous button\r\n    prevButton.disabled = currentPage <= 1;\r\n    nextButton.disabled = currentPage >= totalPages;\r\n\r\n    // Also update images when navigation changes\r\n    updateImages();\r\n    updateAlignmentImage(currentSet, currentPage);\r\n    // updateImageProperties();\r\n}\r\n\r\n// Function to update mainImage and reportImage based on current page\r\nfunction updateImages() {\r\n    if (!currentSet || !currentSet.validationImages || currentSet.validationImages.length === 0) {\r\n        console.warn(\"No images to update.\");\r\n        return;\r\n    }\r\n\r\n    const mainImage = document.getElementById(\"mainImage\");\r\n    const reportImage = document.getElementById(\"reportImage\");\r\n\r\n    const currentImages = currentSet.validationImages[currentPage - 1];\r\n\r\n    if (currentImages) {\r\n        mainImage.src = `${currentImages[0]}`;\r\n        reportImage.src = `${currentImages[1]}`;\r\n    } else {\r\n        console.warn(`No images found for page ${currentPage}`);\r\n    }\r\n}\r\n\r\n// Event listeners for buttons\r\ndocument.getElementById(\"prev-page\").addEventListener(\"click\", () => {\r\n    if (currentPage > 1) {\r\n        currentPage--;\r\n        updateNavigation();\r\n    }\r\n});\r\n\r\ndocument.getElementById(\"next-page\").addEventListener(\"click\", () => {\r\n    if (currentPage < totalPages) {\r\n        currentPage++;\r\n        updateNavigation();\r\n    }\r\n});\r\nconst mainImage = document.getElementById('mainImage');\r\nconst circleImage = document.getElementById('circleImage');\r\n\r\n// Zoom factor: Controls the level of zoom\r\nconst zoomFactor = 3;\r\nconst circleSize = 200;  // Size of the zoomed area (200px is the size of the circle)\r\nconst sourceWidth = circleSize / zoomFactor;\r\nconst sourceHeight = circleSize / zoomFactor;\r\n\r\n// Declare global variables to be updated\r\nlet imageWidth = 0;\r\nlet imageHeight = 0;\r\nlet imageSrc = \"\";\r\nlet rect = {};\r\n\r\n// Function to refresh image-related properties\r\nfunction updateImageProperties() {\r\n  imageWidth = mainImage.width;\r\n  imageHeight = mainImage.height;\r\n  imageSrc = mainImage.src;\r\n  rect = mainImage.getBoundingClientRect();\r\n}\r\n\r\n// Update image properties when the main image is loaded\r\nmainImage.onload = updateImageProperties;\r\n\r\n// If image is already loaded (e.g., cached), call the function immediately\r\nif (mainImage.complete) {\r\n  updateImageProperties();\r\n}\r\n\r\n// Function to update zoomed view and position circular image\r\nfunction updateZoomedView(x, y) {\r\n\r\n  // Log the image properties on each zoom update\r\n  console.log('Image Width:', imageWidth);\r\n  console.log('Image Height:', imageHeight);\r\n  console.log('Image Src:', imageSrc);\r\n  // Round off values to avoid fractional pixels\r\n  let roundedX = Math.round(x);\r\n  let roundedY = Math.round(y);\r\n\r\n  // Clamp the coordinates to ensure they stay within image bounds\r\n  roundedX = Math.max(sourceWidth / 2, Math.min(imageWidth - sourceWidth / 2, roundedX));\r\n  roundedY = Math.max(sourceHeight / 2, Math.min(imageHeight - sourceHeight / 2, roundedY));\r\n\r\n  // Calculate the source area to zoom into, so the center of the circle is at (x, y)\r\n  const sourceX = roundedX - sourceWidth / 2;\r\n  const sourceY = roundedY - sourceHeight / 2;\r\n\r\n  // Set the circular image's background properties for zoom effect\r\n  circleImage.style.backgroundImage = `url(${imageSrc})`;\r\n  circleImage.style.backgroundSize = `${imageWidth * zoomFactor}px ${imageHeight * zoomFactor}px`;\r\n  circleImage.style.backgroundPosition = `-${sourceX * zoomFactor}px -${sourceY * zoomFactor}px`;\r\n  circleImage.style.backgroundRepeat = 'no-repeat';\r\n\r\n  // Set the circular image size and position based on mouse coordinates\r\n  circleImage.style.width = `${circleSize}px`;\r\n  circleImage.style.height = `${circleSize}px`;\r\n  const circlePosX = Math.round(rect.left + (x - circleSize / 2));\r\n  const circlePosY = Math.round(rect.top + (y - circleSize / 2));\r\n\r\n  // Update the position of the circular image\r\n  circleImage.style.left = `${circlePosX}px`;\r\n  circleImage.style.top = `${circlePosY}px`;\r\n\r\n  // Show the circular image when updating zoomed view\r\n  circleImage.style.display = 'block';\r\n}\r\n\r\n// Mouse move handler to track coordinates and update the zoomed view\r\nmainImage.addEventListener('mousemove', (event) => {\r\n  const x = event.clientX - rect.left;\r\n  const y = event.clientY - rect.top;\r\n\r\n  updateZoomedView(x, y);\r\n});\r\n\r\n// Hide the circular image when mouse leaves the main image\r\nmainImage.addEventListener('mouseleave', () => {\r\n  circleImage.style.display = 'none';\r\n});\r\n\r\ndocument.getElementById(\"fullscreenBtn\").addEventListener(\"click\", function() {\r\n    var wrapper = document.querySelector(\".alignment-image-wrapper\");\r\n    var icon = document.getElementById(\"fullscreenBtn\");\r\n    \r\n    // Toggle fullscreen class on wrapper\r\n    wrapper.classList.toggle(\"fullscreen\");\r\n    \r\n    // Toggle icon to indicate fullscreen state\r\n    if (wrapper.classList.contains(\"fullscreen\")) {\r\n        icon.textContent = \"\u26d4\"; // Change to \"Exit Fullscreen\" icon (or any icon of your choice)\r\n    } else {\r\n        icon.textContent = \"\u26f6\"; // Original fullscreen icon\r\n    }\r\n});\r\n\r\n</script>\r\n</body>\r\n\r\n</html>";
}
